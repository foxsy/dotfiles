" Vundle and bundles configuration
source ~/.dotfiles/vim/bundles.vim

:syntax enable
:set background=dark
:set ruler
:set nomodeline
:set t_Co=256
:set showcmd
:let mapleader=","
:set pastetoggle=<leader>p

" bottom bar
":let g:airline_powerline_fonts=1
:set laststatus=2

:set nofoldenable

if $TERM == 'screen'
  set term=xterm
endif

set backupdir=~/tmp/vim//
set directory=~/tmp/vim//

" On OSX
vmap <D-c> y:call system("pbcopy", getreg("\""))<CR>
nmap <D-v> :call setreg("\"",system("pbpaste"))<CR>p

nmap <silent> <c-n> :NERDTreeToggle<CR>
nmap <silent> <c-o> :FufFile **/<CR>
nmap <silent> <c-y> :tabnew<CR>

" Turn on spell check for mail "
:autocmd FileType mail setlocal spell spelllang=en_us

" Title string stuff "
let &titlestring = hostname() . "[vim(" . expand("%:t") . ")]"

if &term == "screen"
  set t_ts=^[k
  set t_fs=^[\
endif

if &term == "screen" || &term == "xterm"
  set title
endif

" settings for ultisnips"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"
map <leader>u :UltiSnipsEdit<CR>

" puppet manifests "
au BufRead,BufNewFile *.pp   setfiletype puppet
:autocmd FileType puppet set shiftwidth=2
:autocmd FileType puppet set softtabstop=2
:autocmd FileType puppet set autoindent
:autocmd FileType puppet set smartindent
:autocmd FileType puppet set expandtab
:autocmd FileType puppet map <leader>r :call VimuxRunCommand("clear; rake")<CR>
:autocmd FileType puppet map <leader>k :w<CR>:Tabularize /=><CR>
:autocmd FileType puppet map <leader>l :w<CR>:!puppet-lint %<CR>

" ruby syntax "
au BufRead,BufNewFile *.rb   setfiletype ruby
:autocmd FileType ruby set shiftwidth=2
:autocmd FileType ruby set softtabstop=2
:autocmd FileType ruby set autoindent
:autocmd FileType ruby set smartindent
:autocmd FileType ruby set expandtab
:autocmd FileType ruby map <leader>l :w<CR>:!ruby -c %<CR>

" logstash syntax "
:autocmd FileType logstash set shiftwidth=2
:autocmd FileType logstash set softtabstop=2
:autocmd FileType logstash set autoindent
:autocmd FileType logstash set smartindent
:autocmd FileType logstash set expandtab
:autocmd FileType logstash map <leader>k :w<CR>:Tabularize /=><CR>


" saltstack syntax "
au BufRead,BufNewFile *.sls   setfiletype sls
:autocmd FileType sls set shiftwidth=2
:autocmd FileType sls set softtabstop=2
:autocmd FileType sls set autoindent
:autocmd FileType sls set smartindent
:autocmd FileType sls set expandtab

" terraform syntax "
au BufRead,BufNewFile *.tf setlocal filetype=terraform
:autocmd FileType terraform set shiftwidth=2
:autocmd FileType terraform set softtabstop=2
:autocmd FileType terraform set autoindent
:autocmd FileType terraform set smartindent
:autocmd FileType terraform set expandtab


" golang syntax "
au BufRead,BufNewFile *.go set filetype=go
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>s <Plug>(go-implements)

" python syntax "
au BufRead,BufNewFile *.py   setfiletype python
:autocmd FileType python set shiftwidth=4
:autocmd FileType python set softtabstop=4
:autocmd FileType python set autoindent
:autocmd FileType python set smartindent

" cucumber files "
au Bufread,BufNewFile *.feature setfiletype cucumber
:autocmd FileType cucumber set shiftwidth=2
:autocmd FileType cucumber set softtabstop=2
:autocmd FileType cucumber set autoindent
:autocmd FileType cucumber set smartindent

" nagios/icinga files "
au Bufread,BufNewFile *.cfg setfiletype icinga
:autocmd FileType icinga set shiftwidth=2
:autocmd FileType icinga set softtabstop=2
:autocmd FileType icinga set autoindent
:autocmd FileType icinga set smartindent

" json files "
au Bufread,BufNewFile *.json setfiletype json
:autocmd FileType json set shiftwidth=2
:autocmd FileType json set softtabstop=2
:autocmd FileType json set autoindent
:autocmd FileType json set smartindent

" erlang files "
au BufRead,BufNewFile *.erl set filetype=erlang

" puppet manifests "
au BufRead,BufNewFile *.md   setfiletype markdown

" vimwiki stuff "
let iru=$IRU

if iru == "trulia"
	let g:vimwiki_list = [ {'path': '~/Documents/VimWiki/trulia.wiki'} ]
endif

if iru == ""
	let g:vimwiki_list = [ {'path': '~/Documents/VimWiki/tech.wiki'} ]
endif

au BufRead,BufNewFile *.wiki set filetype=vimwiki
:autocmd FileType vimwiki map <leader>d :VimwikiMakeDiaryNote<CR>

function! ToggleCalendar()
  execute ":Calendar"
  if exists("g:calendar_open")
    if g:calendar_open == 1
      execute "q"
      unlet g:calendar_open
    else
      g:calendar_open = 1
    end
  else
    let g:calendar_open = 1
  end
endfunction
:autocmd FileType vimwiki map <leader>c :call ToggleCalendar()<CR>
:autocmd FileType vimwiki map <leader>s :VimwikiSearch /
:autocmd FileType vimwiki map <leader>dg :VimwikiDiaryGenerateLinks<CR>
:autocmd FileType vimwiki map <leader>di :VimwikiDiaryIndex<CR>

" Turn off file caching for fuzzy file finder "
let g:fuf_help_cache_dir = ''
let g:fuf_tag_cache_dir = ''
let g:fuf_taggedfile_cache_dir = ''
